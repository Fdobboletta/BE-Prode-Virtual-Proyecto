### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""Partido"""
type Match {
  awayTeam: String!
  homeTeam: String!
  id: ID!
  officialScore: Score
  roomId: ID!
  startDate: String!
}

"""Token de acceso a Mercado Pago"""
type MercadoPagoAccessToken {
  accessToken: String!
}

"""Informacion de link de pago de MercadoPago"""
type MercadoPagoPreference {
  preferenceId: ID!
}

type Mutation {
  activateRoom(roomId: String!): Room!
  authenticateUser(email: String!, password: String!): User!
  authorizeMercadoPago(mercadoPagoCode: String!): MercadoPagoAccessToken
  changePassword(newPassword: String!, token: String!): String
  createMatch(awayTeam: String!, date: String!, homeTeam: String!, roomId: String!): Match!
  createRoom(dueDate: String!, entryPrice: Float!, isActive: Boolean!, name: String!, prizeMoney: Float!): Room!
  deleteMatch(matchId: String!): String
  deleteRoom(roomId: String!): String
  disconnectMercadoPagoIntegration: String
  registerNewUser(address: String!, cellphone: String!, email: String!, firstName: String!, lastName: String!, password: String!, role: UserRole!, termsAccepted: Boolean!): User!
  sendResetPasswordEmail(email: String!): String
  updateManyMatchScores(scoreUpdates: [ScoreUpdateInput!]!): [Match!]!
  updateMatch(awayTeam: String!, date: String!, homeTeam: String!, matchId: String!): Match!
  updateRoom(dueDate: String!, entryPrice: Float!, isActive: Boolean!, name: String!, prizeMoney: Float!, roomId: String!): Room
}

type Query {
  getActiveRooms: [Room!]!
  getMatchesByRoomId(roomId: String!): [Match!]!
  getRoomById(roomId: String!): Room!
  getRoomsByUserId: [Room!]!
  getUserMpAccessToken: String
  validateToken(isResetPassword: Boolean!, token: String!): Boolean!
}

"""Sala de prode"""
type Room {
  dueDate: String!
  entryPrice: Float!
  id: ID!
  isActive: Boolean!
  name: String!
  paymentLink: String!
  prizeMoney: Float!
}

enum Score {
  AWAY
  DRAW
  HOME
}

input ScoreUpdateInput {
  matchId: ID!
  score: Score
}

"""App user"""
type User {
  address: String!
  cellphone: String!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  role: UserRole!
  token: String!
}

enum UserRole {
  ADMIN
  PLAYER
}