/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { GqlContext } from "./../context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  PositionZone: "ARQ" | "DEF" | "DEL" | "MED"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Mutation: {};
  Position: { // root type
    abbreviation: string; // String!
    id: string; // ID!
    name: string; // String!
    zone?: NexusGenEnums['PositionZone'] | null; // PositionZone
  }
  Query: {};
  Team: { // root type
    city: string; // String!
    description?: string | null; // String
    id: string; // ID!
    logoUrl: string; // String!
    mainColor: string; // String!
    name: string; // String!
    secondColor?: string | null; // String
    thirdColor?: string | null; // String
  }
  User: { // root type
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    teamId?: string | null; // String
    token: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    authenticateUser: NexusGenRootTypes['User']; // User!
    createPosition: NexusGenRootTypes['Position']; // Position!
    createTeam: NexusGenRootTypes['Team']; // Team!
    registerNewUser: NexusGenRootTypes['User']; // User!
  }
  Position: { // field return type
    abbreviation: string; // String!
    id: string; // ID!
    name: string; // String!
    zone: NexusGenEnums['PositionZone'] | null; // PositionZone
  }
  Query: { // field return type
    getAllPositions: NexusGenRootTypes['Position'][]; // [Position!]!
  }
  Team: { // field return type
    city: string; // String!
    description: string | null; // String
    id: string; // ID!
    logoUrl: string; // String!
    mainColor: string; // String!
    name: string; // String!
    secondColor: string | null; // String
    thirdColor: string | null; // String
  }
  User: { // field return type
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    teamId: string | null; // String
    token: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    authenticateUser: 'User'
    createPosition: 'Position'
    createTeam: 'Team'
    registerNewUser: 'User'
  }
  Position: { // field return type name
    abbreviation: 'String'
    id: 'ID'
    name: 'String'
    zone: 'PositionZone'
  }
  Query: { // field return type name
    getAllPositions: 'Position'
  }
  Team: { // field return type name
    city: 'String'
    description: 'String'
    id: 'ID'
    logoUrl: 'String'
    mainColor: 'String'
    name: 'String'
    secondColor: 'String'
    thirdColor: 'String'
  }
  User: { // field return type name
    email: 'String'
    firstName: 'String'
    id: 'ID'
    lastName: 'String'
    teamId: 'String'
    token: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    authenticateUser: { // args
      email: string; // String!
      password: string; // String!
    }
    createPosition: { // args
      abbreviation: string; // String!
      name: string; // String!
      zone: NexusGenEnums['PositionZone']; // PositionZone!
    }
    createTeam: { // args
      city: string; // String!
      description?: string | null; // String
      logoUrl: string; // String!
      mainColor: string; // String!
      name: string; // String!
      secondColor?: string | null; // String
      thirdColor?: string | null; // String
    }
    registerNewUser: { // args
      email: string; // String!
      firstName: string; // String!
      lastName: string; // String!
      password: string; // String!
      teamId?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: GqlContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}